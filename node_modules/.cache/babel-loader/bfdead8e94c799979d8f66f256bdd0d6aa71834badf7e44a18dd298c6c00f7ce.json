{"ast":null,"code":"var _jsxFileName = \"/home/daniel/repos/byte-sized-web/src/pages/html.js\";\nimport React from 'react';\nimport Article from '../components/ArticleElements/Article.js';\nimport './html.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HtmlPage() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Article, {\n      title: \"What is HTML?\",\n      text: \"HyperText Markup Language defines the structure of a webpage. An HTML element is the basic building block of a webpage and is indicated by HTML tags. Here is a element bound by <h1> tags: \",\n      code: \"<h1>Title of Section</h1>\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"html-boilerplate html-article\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"html-title\",\n          children: \"HTML Boilerplate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Boilerplate code is a template of the bare minimum code that you need in order to share a page across the web. The first tag in the document will declare what type of data is stored within so we use the html tag. The second tag includes files, scripts, and styles for formatting your webpage within the head tag. Finally the third tag you need contains all the info you want to display within the body tag. The basic strutcture looks like this but in a working webpage there will be tons of code in between those tags!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: [`<html>    `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 39\n          }, this), `   <head> `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 39\n          }, this), `          `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 39\n          }, this), `   </head>`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 39\n          }, this), `   <body> `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 39\n          }, this), `          `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 39\n          }, this), `   </body>`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 39\n          }, this), `</html>   `, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n_c = HtmlPage;\nexport default HtmlPage;\nvar _c;\n$RefreshReg$(_c, \"HtmlPage\");","map":{"version":3,"names":["React","Article","jsxDEV","_jsxDEV","HtmlPage","children","title","text","code","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/home/daniel/repos/byte-sized-web/src/pages/html.js"],"sourcesContent":["import React from 'react'\nimport Article from '../components/ArticleElements/Article.js'\nimport './html.css'\n\nfunction HtmlPage() {\n    return (\n        <div>\n            <Article\n                title='What is HTML?'\n                text='HyperText Markup Language defines the structure of a webpage. An HTML element is the basic building block of a webpage and is indicated by HTML tags. Here is a element bound by <h1> tags: '\n                code='<h1>Title of Section</h1>'\n\n            />\n            <article className='html-boilerplate html-article'>\n                <header>\n                    <h1 className='html-title'>HTML Boilerplate</h1>\n                </header>\n                <p>Boilerplate code is a template of the bare minimum code that you need in order to share a page across the web.\n                    The first tag in the document will declare what type of data is stored within so we use the html tag.\n                    The second tag includes files, scripts, and styles for formatting your webpage within the head tag.\n                    Finally the third tag you need contains all the info you want to display within the body tag.\n                    The basic strutcture looks like this but in a working webpage there will be tons of code in between those tags!\n                </p>\n                <pre>\n                    <code>\n                        {`<html>    `}<br />\n                        {`   <head> `}<br />    \n                        {`          `}<br />\n                        {`   </head>`}<br />    \n                        {`   <body> `}<br />    \n                        {`          `}<br />\n                        {`   </body>`}<br />    \n                        {`</html>   `}<br />\n                    </code>\n                </pre>\n            </article>\n\n        </div>\n\n    )\n}\n\nexport default HtmlPage"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,0CAA0C;AAC9D,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,QAAQA,CAAA,EAAG;EAChB,oBACID,OAAA;IAAAE,QAAA,gBACIF,OAAA,CAACF,OAAO;MACJK,KAAK,EAAC,eAAe;MACrBC,IAAI,EAAC,8LAA8L;MACnMC,IAAI,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAElC,eACFT,OAAA;MAASU,SAAS,EAAC,+BAA+B;MAAAR,QAAA,gBAC9CF,OAAA;QAAAE,QAAA,eACIF,OAAA;UAAIU,SAAS,EAAC,YAAY;UAAAR,QAAA,EAAC;QAAgB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAK;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3C,eACTT,OAAA;QAAAE,QAAA,EAAG;MAKH;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACJT,OAAA;QAAAE,QAAA,eACIF,OAAA;UAAAE,QAAA,GACM,YAAW,eAACF,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,EAClB,YAAW,eAACT,OAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACjB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAER;AAGd;AAACE,EAAA,GApCQV,QAAQ;AAsCjB,eAAeA,QAAQ;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}